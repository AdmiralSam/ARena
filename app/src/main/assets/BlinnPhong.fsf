varying mediump vec2 interpolatedUV;
varying mediump vec4 interpolatedNormal;
varying mediump vec4 interpolatedPosition;

uniform sampler2D uvMap;
uniform mediump float specularExponent;
uniform mediump vec4 cameraPosition;

void main() {
    mediump vec3 normal = normalize(interpolatedNormal.xyz);
    mediump vec3 eye = normalize(cameraPosition.xyz - interpolatedPosition.xyz);
    mediump vec3 light = normalize(vec3(0.0, 0.0, 10.0) - interpolatedPosition.xyz);

    mediump vec3 halfVector = normalize(light + eye);

    mediump float ambient = 0.5;
    mediump float diffuse = 0.5 * max(dot(normal, light), 0.0);
    mediump float specular = 0.5 * pow(max(dot(halfVector, normal), 0.0), specularExponent);

    mediump vec4 diffuseColor = texture2D(uvMap, interpolatedUV);

    gl_FragColor = vec4(diffuseColor.rgb * (ambient + diffuse + specular), diffuseColor.a);
}
